#causal broadcast
This program executes causal broadcast between a set of N (=5) processes. Causal broadcast respects causal delivery of messages in a system where processes communicate with each other only through broadcasts.

GitHub link: https://github.com/shobhit6993/causal_delivery/tree/master

Build instructions:
Type make

It should create 5 executables process0,...,process4

Type make clean to delete all executables and logfiles

Running instructions:
Give execute permission to run.sh script using
chmod +x ./run.sh

Run the script using
./run.sh

This runs 5 processes (one for each "process"). You should see debugging/status messages on screen. When the messages stop getting printed, kill the process(es) using Ctrl+C.
The processes do not kill themselves since they are always listening to incoming messages, logging parallely, with unknown (simulated) delay in message transmission.

Logs:
Each process generates its own log file, like log0, log1,...

Configuration:
The configurations can be provided in config file. Following is a sample config file

0 0 3 3 3
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 br at 1
1 br at 2 3

If there are N processes (N=5 at present), then config file contains a N*N upper triangular matrix of whole numbers. Value in cell (i,j) of the upper triangle represents the delay between process i and process j in seconds. For example, in above case, the delay between 0 and 2 is 4 sec.

This is followed by at max N number of lines, where each line starts with process ID, followed by " br at " folllwed by a space separated list of whole numbers.

0 br at 1       // Process 0 broadcasts at t=1
1 br at 2 3     // Process 1 braodcasts at t=2 and t=3

Notes:
1. Always run make clean before each execution so that previous logs are deleted. Otherwise, the old log files will be appended with new log data.
2. Repeated execution might be hindered by ports being left open. Use lsof -i command to see if previous processes are still hogging the ports, and kill them using kill -9 PID
3. TCP sockets are used for interprocess communication.
4. All delays are whole numbers.
5. If you see error messages on screen, then kill the program and make sure that no other (or previous instances of this program) are using the required ports
6. Value of N can be set in the process.h file. If you change N, you have to add LISTEN_PORTi and SEND_PORTi for each new process (beyond the current 5), and add corresponding ports to constuctor of class Process at the beginning of process.cpp
